name: Build

on:
  push:
    branches: main
  pull_request:
    branches: '*'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install node
      uses: actions/setup-node@v1
      with:
       node-version: '14.x'
    - name: Install Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
        architecture: 'x64'
    
    
    - name: Setup pip cache
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: pip-3.8-${{ hashFiles('package.json') }}
        restore-keys: |
          pip-3.8-
          pip-

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - name: Setup yarn cache
      uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          yarn-

    - name: Install dependencies
      run: python -m pip install -U jupyterlab~=3.0 check-manifest
    - name: Install extension
      run: |
        set -eux
        jlpm
        python -m pip install .
        jupyter labextension list 2>&1 | grep -ie "jupyterlab-citation-manager.*OK"

    - name: Run browser check test
      run: |
        set -eux
        python -m jupyterlab.browser_check

    - name: Check style
      run: |
        set -eux
        jlpm run eslint:check

    - name: Build the extension
      run: |
        set -eux
        check-manifest -v

        pip install build
        python -m build --sdist
        cp dist/*.tar.gz extension.tar.gz
        pip uninstall -y extension jupyterlab
        rm -rf extension
    - uses: actions/upload-artifact@v2
      with:
        name: extension-sdist
        path: extension.tar.gz

  test_isolated:
    name: Test in isolated environment
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
        architecture: 'x64'
    - uses: actions/download-artifact@v2
      with:
        name: extension-sdist
    - name: Install and Test
      run: |
        set -eux
        # Remove NodeJS, twice to take care of system and locally installed node versions.
        sudo rm -rf $(which node)
        sudo rm -rf $(which node)
        pip install extension.tar.gz
        pip install jupyterlab
        jupyter labextension list 2>&1 | grep -ie "jupyterlab-citation-manager.*OK"
        python -m jupyterlab.browser_check --no-chrome-test

  test_python:
    name: Run Python tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          architecture: 'x64'
      - name: Install testing dependencies
        run: python -m pip install pytest jupyter_server
      - name: Copy package.json
        run: |
          mkdir jupyterlab_citation_manager/labextension
          cp package.json jupyterlab_citation_manager/labextension/
      - name: Run Python tests
        run: |
          set -eux
          python3 -m pytest

  ui-test:
    name: Integration tests
    runs-on: ubuntu-latest

    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - uses: actions/download-artifact@v2
        with:
          name: extension-sdist
      - name: Setup Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
          architecture: 'x64'

      - name: Install dependencies
        run: |
          pip install extension.tar.gz
          pip install jupyterlab~=3.0

      - name: Prepare for UI tests
        run: |
          jlpm
          jlpm install:browser
          jlpm start-jlab:detached
        working-directory: ui-tests

      - name: Wait for JupyterLab
        uses: ifaxity/wait-on-action@31409304f67f28ae9559d3646ac9b59f78c6f0ba
        with:
          resource: http-get://localhost:8888/lab
          timeout: 360000

      - name: Run UI tests
        run: |
          jlpm run test
        working-directory: ui-tests

      - name: Upload UI Test artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ui-test-output
          path: |
            ui-tests/playwright-report
            ui-tests/test-results

      - name: Stop JupyterLab
        if: always()
        run: |
          killall jupyter-lab
        working-directory: ui-tests
